<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>登录与校验的思路</title>
      <link href="/KendricW.github.io/2024/03/13/%E7%99%BB%E5%BD%95%E4%B8%8E%E6%A0%A1%E9%AA%8C%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
      <url>/KendricW.github.io/2024/03/13/%E7%99%BB%E5%BD%95%E4%B8%8E%E6%A0%A1%E9%AA%8C%E7%9A%84%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 开发思路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 登录 </tag>
            
            <tag> 校验 </tag>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/KendricW.github.io/2024/03/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/KendricW.github.io/2024/03/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>除GOF23种外的设计模式<br>    * 简单工厂模式<br>        * 由一个工厂决定创建哪一种产品类型的实例</p><ul><li><p>创建型模式</p><ul><li>隐藏了创建对象的过程,通过逻辑方法进行创建对象,而不是通过new关键字进行创建<ul><li>工厂方法模式<ul><li>定义一个接口或一个抽象的工厂类,让它实现类(工厂)来决定创建哪一个实例对象</li><li>根据每个工厂不同的方法,来产生不同的所需要的对象</li><li>工厂方法模式生产的都是相同系列的对象,比如Java课程,Python课程</li></ul></li><li>抽象工厂模式<ul><li>抽象工厂模式提供了创建一系列相关或互相依赖对象的接口</li><li>类似公司下的产品,生产,生产汽车,将汽车分为各个零部件进行生产,车架,车门,底盘.</li></ul></li><li>建造者模式<ul><li>将复杂的对象的创建和属性赋值所分离</li><li>监造的过程和细节我们不需要知道,只需要通过构建者去进行操作即可</li></ul></li><li>原型模式<ul><li>用于创建重复的对象,能够保证创建对象的性能.</li><li>原型设计模式是创建对象的最佳方式</li></ul></li><li>单例模式<ul><li>在程序中想要保持一个实力对象的,就是用单例设计模式</li><li>减少内存开销<ul><li>懒汉式<ul><li>在需要使用对象的时候,才会创建</li></ul></li><li>双重检查<ul><li>通过两个if判断,加上同步锁进行实现</li></ul></li><li>静态内部类<ul><li>在单例类中,通过私有的静态内部类,创建单例对象</li></ul></li><li>饿汉式<ul><li>在调用时,就会创建单例对象,通过静态代码块或静态变量直接初始化</li></ul></li><li>枚举<ul><li>枚举的方式实现单例模式,是最佳的实现方式</li><li>它可以有效防止对单例模式的破坏<ul><li>序列化和反序列的方式破坏单例模式<ul><li>通过流将单例对象,序列化到文件中,然后再反序列化读取出来</li><li>最终通过反序列化的方式创建出一个对象</li><li>发现两个对象的内存地址完全不一致,从而破坏了单例设计模式解构</li><li>在单例类中,写一个方法名称必须为readResolve<ul><li>因为在反序列化创建对象时,是通过反射创建的</li><li>反射会调用我们自己的readResolve,方法</li><li>如果重写了,就代表返回自己的单例对象</li><li>如果没有重写,会通过反射的方式创建一个新的对象,从而破坏了单例设计模式  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doubleCheckSingleton;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li>通过反射的方式破坏单例模式<ul><li>通过字节码对象,创建构造器对象</li><li>通过构造器对象,初始化单例对象<ul><li>由于单例对象的构造方法是私有化的</li><li>调用构造器中的方法,赋予权限,创建单例对象</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li><p>结构型模式</p><ul><li>主要关注类和对象的组合关系</li><li>继承的概念被用来组合接口和定义组合对象,获得新的功能方式<ul><li>外观模式<ul><li>提供了一个统一的接口,用来访问子系统中的一群接口</li><li>定义了一个高层接口,让子系统使用更加容易</li></ul></li><li>适配器模式<ul><li>适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁,将一个类的接口转换成客户希望的另外一个接口</li><li>适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作</li><li>这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能</li></ul></li><li>桥接模式<ul><li>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。</li><li>这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</li><li>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</li></ul></li><li>组合模式<ul><li>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。</li><li>组合模式依据树形结构来组合对象，用来表示部分以及整体层次。</li><li>这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</li><li>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</li><li>我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。</li></ul></li><li>代理模式<ul><li>为对象提供一种代理，以控制这个对象的访问操作</li><li>代理对象和目标对象之间起到中介的作用</li><li>保护目标对象和增强目标对象</li><li>代理模式能将代理对象与真实被调用的目标对象分离</li><li>一定程度上降低了系统的耦合度，扩展性好</li></ul></li><li>装饰模式<ul><li>在原有对象不做改变的基础上，将对象的功能附加上</li><li>提供了比继承更有弹性的替代方案(扩展原有对象功能)</li><li>扩展一个类的功能或给一个类添加附加职责(业务逻辑)</li><li>动态的给一个对象添加功能，这些功能可以再动态的撤销</li><li>继承的有力补充，比继承灵活，不改变原有对象的情况下给一个对象扩展功能</li><li>通过使用不同装饰类以及这些装饰类的排列组合，可以实现不同效果</li></ul></li><li>享元模式<ul><li>提供了减少对象数量从而改善应用所需的对象结构的方式</li><li>运用共享技术有效地支持大量细粒度的对象</li><li>总结：减少创建对象的数量，从而减少内存的占用，提升性能</li></ul></li></ul></li></ul></li><li><p>行为型模式</p><ul><li>主要关注对象之间的通信<ul><li>模板方法模式<ul><li>定义了一个算法的架构，并允许子类为一个或多个步骤的实现</li><li>模板方法在子类不改变算法结构的情况下，重新定义算法的某些步骤</li><li>实现一个算法的不变的部分，并将可变的空间留给子类来完成</li><li>子类中公共的行为抽取出来并封装到一个公共父类中，避免代码重复</li></ul></li><li>迭代器模式<ul><li>提供方法，顺序访问集合对象中的各个元素，而又不暴露对象的内部表示</li><li>为遍历不同的集合结构提供统一的接口,分离了集合对象的遍历行为</li></ul></li><li>策略模式<ul><li>定义了算法，分别封装起来，它们之间可以相互替换，让算法的变化不会影响到使用算法的用户</li><li>如果有大量的if…else…else if…可以通过策略模式进行替换</li><li>避免使用多重条件转语句，if…else if…else</li><li>提高算法的保密性和安全性</li></ul></li><li>解释器模式<ul><li>通过给定的语言，定义它的语法和行为，并定义解释器，这个解释器使用来解释语言中的句子</li><li>为了解释一种语言，而为语言创建的解释器<ul><li>某个类型问题触发频次足够高,比如处理日志和不同日志格式</li></ul></li></ul></li><li>观察者模式<ul><li>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）</li><li>比如，当一个对象被修改时，则会自动通知依赖它的对象。</li><li>让多个观察者对象同时监听某一个主题对象，当主题对象发生变化时，它的所有依赖者(观察者)都会收到通知并更新</li></ul></li><li>备忘录模式<ul><li>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</li><li>所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</li><li>很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有”后悔药”可吃。</li></ul></li><li>命令模式<ul><li>将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。解决了应用程序中对象的职责以及它们之间的通信方式</li><li>在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</li><li>请求调用者和行为实现者需要解耦，使得调用者和行为实现者不直接交互</li></ul></li><li>中介者模式<ul><li>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。</li><li>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li><li>对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</li></ul></li><li>责任链模式<ul><li>为请求创建了一个接收者对象的链。对请求的发送者和接收者进行解耦。</li><li>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</li><li>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</li><li>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</li></ul></li><li>访问者模式<ul><li>使用一个访问者类，它改变了元素类的执行算法。</li><li>通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。</li><li>根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</li><li>主要将数据结构与数据操作分离。稳定的数据结构和易变的操作耦合问题。</li></ul></li><li>状态模式<ul><li>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。</li><li>允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</li><li>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字母异位词分组</title>
      <link href="/KendricW.github.io/2024/03/12/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
      <url>/KendricW.github.io/2024/03/12/%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="字母异位词分组"><a href="#字母异位词分组" class="headerlink" title="字母异位词分组"></a>字母异位词分组</h1><p>[toc]</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a><strong>题目</strong></h2><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a><strong>示例 1:</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a><strong>示例 2:</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;&quot;]</span><br><span class="line">输出: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure><h2 id="示例-3"><a href="#示例-3" class="headerlink" title="示例 3:"></a><strong>示例 3:</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: strs = [&quot;a&quot;]</span><br><span class="line">输出: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><h2 id="题解1（质数）"><a href="#题解1（质数）" class="headerlink" title="题解1（质数）"></a><strong>题解1（质数）</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Character, Integer&gt; MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Integer&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">        put(<span class="string">&#x27;b&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">        put(<span class="string">&#x27;c&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// ... 省略其他字符和对应的数值</span></span><br><span class="line">        put(<span class="string">&#x27;z&#x27;</span>, <span class="number">101</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        Map&lt;Integer, List&lt;String&gt;&gt; resMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">                hash *= MAP.get(c);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!resMap.containsKey(hash)) &#123;</span><br><span class="line">                resMap.put(hash, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            &#125;</span><br><span class="line">            resMap.get(hash).add(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resMap.values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="题解2（stream流）"><a href="#题解2（stream流）" class="headerlink" title="题解2（stream流）"></a><strong>题解2（stream流）</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将给定字符串数组按照其中每个字符串的字母异位词进行分组，并返回一个包含这些分组的列表。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strs 输入的字符串数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个列表，其中每个元素是属于同一字母异位词组的字符串列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">                Arrays.stream(strs)</span><br><span class="line">                        <span class="comment">// 使用sortedCharsToString方法将每个字符串转换为它的排序后字符表示，以此作为分组键</span></span><br><span class="line">                        .collect(Collectors.groupingBy(<span class="built_in">this</span>::sortedCharsToString))</span><br><span class="line">                        <span class="comment">// 取得所有分组值（即每个组内的字符串集合）</span></span><br><span class="line">                        .values());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有辅助方法，接收一个字符串参数并返回其内部字符经过排序后的字符串形式。</span></span><br><span class="line"><span class="comment">     * 这个方法用于识别和区分字母异位词。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 输入的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 字符串s中所有字符按字典序排序后的新字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">sortedCharsToString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="comment">// 将字符串转换为字符流，排序后构建新的字符串</span></span><br><span class="line">        <span class="keyword">return</span> s.chars()</span><br><span class="line">                .sorted()</span><br><span class="line">                .collect(StringBuilder::<span class="keyword">new</span>, StringBuilder::appendCodePoint, StringBuilder::append)</span><br><span class="line">                .toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="题解3（官方）"><a href="#题解3（官方）" class="headerlink" title="题解3（官方）"></a><strong>题解3（官方）</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 给定一个字符串数组，将其中的字母异位词分组并返回结果列表。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strs 字符串数组，包含多个可能为字母异位词的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 一个List&lt;List&lt;String&gt;&gt;类型的对象，每个内部列表代表一组字母异位词</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个HashMap来存储字母异位词分组，键是排序后的字符组成的字符串，值是一个字符串列表</span></span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历输入的字符串数组</span></span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="comment">// 将当前字符串转换为字符数组</span></span><br><span class="line">            <span class="type">char</span>[] array = str.toCharArray();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 对字符数组进行排序，使得所有相同字母异位词在排序后得到相同的字符序列</span></span><br><span class="line">            Arrays.sort(array);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将排序后的字符数组转换回字符串作为哈希表的键</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取或初始化与当前键关联的字符串列表（若不存在则创建一个新的ArrayList）</span></span><br><span class="line">            List&lt;String&gt; list = map.getOrDefault(key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向对应的列表中添加原始的字符串</span></span><br><span class="line">            list.add(str);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新映射表，将排序后字符串对应的列表存入键值对中</span></span><br><span class="line">            map.put(key, list);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将映射表中的所有值（即每组字母异位词的列表）转换为一个新的ArrayList，并返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动零</title>
      <link href="/KendricW.github.io/2024/03/12/%E7%AE%97%E6%B3%95-%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
      <url>/KendricW.github.io/2024/03/12/%E7%AE%97%E6%B3%95-%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="移动零（简单）"><a href="#移动零（简单）" class="headerlink" title="移动零（简单）"></a>移动零（简单）</h1><p>[toc]</p><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code> 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>请注意 ，必须在不复制数组的情况下原地对数组进行操作。</p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1:"></a><strong>示例 1:</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2:"></a><strong>示例 2:</strong></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a><strong>题解</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 移动零 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//如果数组是空的直接返回，不浪费时间</span></span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录非零的数目</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//第一次遍历的时候，只要是非0的统统都赋给nums[j]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                nums[j++] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将后面的数补0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> j; i &lt; nums.length; i++) &#123;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://big-event-wzx.oss-cn-beijing.aliyuncs.com/image-20240312002556724.png" alt="成果"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/KendricW.github.io/2024/03/10/hello-world/"/>
      <url>/KendricW.github.io/2024/03/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
